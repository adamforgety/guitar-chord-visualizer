<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, viewport-fit=cover">
    <title>Guitar Chord Visualizer</title>
    <!-- Load Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        /* Custom styles for the visualizer */
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f7f9fb;
        }
        .key-shadow {
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -2px rgba(0, 0, 0, 0.06);
        }
        /* Ensure the body takes up full height for mobile responsiveness */
        body {
            height: 100vh;
        }
    </style>
</head>
<body class="p-1 h-screen flex items-center justify-center">

    <div class="w-full max-w-4xl bg-white rounded-xl shadow-2xl p-4 md:p-6 h-[98%] overflow-y-auto">
        <header class="mb-6">
            <h1 class="text-3xl md:text-4xl font-extrabold text-gray-900 mb-1 text-center">
                Guitar Chord Visualizer
            </h1>
            <p class="text-center text-gray-600 text-sm md:text-base">
                Select the Root Note, Chord Type, and Position to see the finger position.
            </p>
        </header>

        <!-- Selection Controls: 3 Dropdowns for maximum flexibility -->
        <div class="grid grid-cols-1 sm:grid-cols-3 gap-3 mb-6 max-w-2xl mx-auto">

            <!-- 1. Root Note Selector -->
            <div class="space-y-1">
                <label for="rootNote" class="block text-sm font-medium text-gray-700">Root Note</label>
                <select id="rootNote" class="block w-full pl-3 pr-10 py-2.5 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-lg rounded-lg border key-shadow bg-gray-50">
                    <!-- Options populated by JS -->
                </select>
            </div>

            <!-- 2. Chord Type Selector (Quality) -->
            <div class="space-y-1">
                <label for="chordType" class="block text-sm font-medium text-gray-700">Chord Type</label>
                <select id="chordType" class="block w-full pl-3 pr-10 py-2.5 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-lg rounded-lg border key-shadow bg-gray-50">
                    <!-- Options populated by JS -->
                </select>
            </div>

             <!-- 3. Position/Shape Selector (Open is now first) -->
            <div class="space-y-1">
                <label for="positionShape" class="block text-sm font-medium text-gray-700">Position / Shape</label>
                <select id="positionShape" class="block w-full pl-3 pr-10 py-2.5 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-lg rounded-lg border key-shadow bg-gray-50">
                    <!-- Options populated by JS -->
                </select>
            </div>
        </div>

        <!-- Visualization Area -->
        <div class="flex flex-col items-center">
            <h2 id="resultName" class="text-xl font-semibold text-gray-800 mb-3 text-center h-6"></h2>
            
            <!-- Message Area for Open Chords that don't exist -->
            <p id="messageArea" class="text-red-500 mb-4 h-6 text-center"></p>
            
            <!-- Fretboard Container: Fixed aspect ratio for vertical chart -->
            <div id="fretboardContainer" class="relative w-full max-w-md p-2 bg-gray-100 rounded-lg key-shadow">
                <svg id="fretboardSvg" width="100%" height="300" preserveAspectRatio="xMidYMid meet"></svg>
            </div>
            
        </div>
    </div>

    <script>
        // --- Core Configuration Data ---
        const NOTE_INFO = [
            { id: 0, name: "C" }, { id: 1, name: "C#" }, { id: 2, name: "D" }, 
            { id: 3, name: "D#" }, { id: 4, name: "E" }, { id: 5, name: "F" }, 
            { id: 6, name: "F#" }, { id: 7, name: "G" }, { id: 8, name: "G#" }, 
            { id: 9, name: "A" }, { id: 10, name: "A#" }, { id: 11, name: "B" }
        ];

        // Chord types (Quality)
        const CHORD_DEFINITIONS = {
            'major': { name: 'Major', intervals: [0, 4, 7] },
            'minor': { name: 'Minor', intervals: [0, 3, 7] },
            'dom7': { name: '7th', intervals: [0, 4, 7, 10] },
            'min7': { name: 'minor 7th', intervals: [0, 3, 7, 10] },
            'maj7': { name: 'Major 7th', intervals: [0, 4, 7, 11] }, 
            'sus2': { name: 'sus2', intervals: [0, 2, 7] },          
            'sus4': { name: 'sus4', intervals: [0, 5, 7] },          
        };

        // Fixed Fingerings for Standard Open Position Chords
        const OPEN_CHORDS = {
            '9_major': { finger: ['X', 0, 2, 2, 2, 0], rootString: 1, name: 'A Major' }, 
            '9_minor': { finger: ['X', 0, 2, 2, 1, 0], rootString: 1, name: 'A minor' }, 
            '9_dom7':  { finger: ['X', 0, 2, 0, 2, 0], rootString: 1, name: 'A7' },
            '9_sus2':  { finger: ['X', 0, 2, 2, 0, 0], rootString: 1, name: 'Asus2' }, 
            '9_sus4':  { finger: ['X', 0, 2, 2, 3, 0], rootString: 1, name: 'Asus4' }, 

            '0_major': { finger: ['X', 3, 2, 0, 1, 0], rootString: 1, name: 'C Major' }, 
            '0_maj7':  { finger: ['X', 3, 2, 0, 0, 0], rootString: 1, name: 'Cmaj7' }, 

            '2_major': { finger: ['X', 'X', 0, 2, 3, 2], rootString: 3, name: 'D Major' },
            '2_minor': { finger: ['X', 'X', 0, 2, 3, 1], rootString: 3, name: 'D minor' },
            '2_dom7':  { finger: ['X', 'X', 0, 2, 1, 2], rootString: 3, name: 'D7' },
            '2_sus2':  { finger: ['X', 'X', 0, 2, 3, 0], rootString: 3, name: 'Dsus2' }, 
            '2_sus4':  { finger: ['X', 'X', 0, 2, 3, 3], rootString: 3, name: 'Dsus4' }, 

            '4_major': { finger: [0, 2, 2, 1, 0, 0], rootString: 0, name: 'E Major' },
            '4_minor': { finger: [0, 2, 2, 0, 0, 0], rootString: 0, name: 'E minor' },
            '4_dom7':  { finger: [0, 2, 0, 1, 0, 0], rootString: 0, name: 'E7' },
            '4_maj7':  { finger: [0, 2, 1, 1, 0, 0], rootString: 0, name: 'Emaj7' }, 
            '4_sus4':  { finger: [0, 2, 2, 2, 0, 0], rootString: 0, name: 'Esus4' }, 

            '7_major': { finger: [3, 2, 0, 0, 0, 3], rootString: 0, name: 'G Major' },
            '7_dom7':  { finger: [3, 2, 0, 0, 0, 1], rootString: 0, name: 'G7' },
            '7_sus4':  { finger: [3, 3, 0, 0, 0, 3], rootString: 0, name: 'Gsus4' }, 
        };
        
        // Fretboard SHAPES (Barre Voicings)
        const SHAPES = {
            'open_position': { name: "Open Position" }, 
            'e_shape': {
                name: "E-Shape (6th String Root)",
                voicings: {
                    'major':    [1, 3, 3, 2, 1, 1], 
                    'minor':    [1, 3, 3, 1, 1, 1], 
                    'dom7':     [1, 3, 2, 2, 1, 1], 
                    'min7':     [1, 3, 1, 2, 1, 1],
                    'maj7':     [1, 3, 2, 3, 4, 1], 
                    'sus2':     [1, 3, 3, 1, 1, 1], 
                    'sus4':     [1, 3, 4, 4, 1, 1], 
                },
                rootStringIndex: 0 // Index 0 (Low E)
            },
            'a_shape': {
                name: "A-Shape (5th String Root)",
                voicings: {
                    'major':    ['X', 1, 3, 3, 3, 1], 
                    'minor':    ['X', 1, 3, 3, 2, 1], 
                    'dom7':     ['X', 1, 3, 2, 3, 1], 
                    'min7':     ['X', 1, 2, 2, 3, 1],
                    'maj7':     ['X', 1, 3, 2, 1, 1], 
                    'sus2':     ['X', 1, 3, 3, 1, 1], 
                    'sus4':     ['X', 1, 3, 3, 4, 1], 
                },
                rootStringIndex: 1 // Index 1 (A string)
            },
        };

        // Array to enforce the desired order in the dropdown (Open first)
        const SHAPE_ORDER = ['open_position', 'e_shape', 'a_shape'];

        // Standard guitar tuning in semitone indices (E A D G B E)
        const STRING_TUNING = [4, 9, 2, 7, 11, 4]; // Low E (6th, Index 0) to High E (1st, Index 5)

        // --- SVG Drawing Configuration for VERTICAL VIEW ---
        const SVG_CONFIG = {
            TOTAL_FRETS: 5, // We draw 5 frets (0, 1, 2, 3, 4, 5)
            TOTAL_STRINGS: 6,
            FRET_HEIGHT: 40, 
            STRING_SPACING: 45, 
            CHART_START_X: 60, // Sufficient padding for 2-digit fret labels
            CHART_START_Y: 40, 
            FRET_THICKNESS: 2,
            STRING_THICKNESS: 1,
            NUT_THICKNESS: 8,
            FINGER_RADIUS: 12,
        };

        // --- DOM Elements ---
        const rootNoteSelect = document.getElementById('rootNote');
        const chordTypeSelect = document.getElementById('chordType');
        const positionShapeSelect = document.getElementById('positionShape');
        const resultNameH2 = document.getElementById('resultName');
        const messageAreaP = document.getElementById('messageArea');
        const fretboardSvg = document.getElementById('fretboardSvg');

        // --- Initialization ---

        function populateSelectors() {
            // 1. Root Notes
            rootNoteSelect.innerHTML = NOTE_INFO.map(note => 
                `<option value="${note.id}">${note.name}</option>`
            ).join('');
            
            // 2. Chord Types (using Object.entries for display order)
            chordTypeSelect.innerHTML = Object.entries(CHORD_DEFINITIONS).map(([key, def]) => 
                `<option value="${key}">${def.name}</option>`
            ).join('');

            // 3. Position/Shapes (using SHAPE_ORDER array)
            positionShapeSelect.innerHTML = SHAPE_ORDER.map(key => 
                `<option value="${key}">${SHAPES[key].name}</option>`
            ).join('');

            // Set Initial Defaults
            rootNoteSelect.value = 0; // C
            chordTypeSelect.value = 'major'; // Major
            positionShapeSelect.value = 'open_position'; // Open Position (now the default)

            // Initial call
            updateVisualization(); 
        }
        
        /**
         * Calculates the fret position and notes for the selected chord.
         */
        function calculateChordFingering(rootIndex, typeKey, shapeKey) {
            
            // --- 1. Handle Open Position (Fixed Fingerings) ---
            if (shapeKey === 'open_position') {
                const lookupKey = `${rootIndex}_${typeKey}`;
                const openChordData = OPEN_CHORDS[lookupKey]; 
                
                if (!openChordData) {
                    return { error: `No standard ${NOTE_INFO[rootIndex].name} ${CHORD_DEFINITIONS[typeKey].name} found in the Open Position.` };
                }
                
                const fingering = [];
                const pattern = openChordData.finger;
                
                for (let i = 0; i < SVG_CONFIG.TOTAL_STRINGS; i++) {
                    const patternValue = pattern[i];
                    
                    if (patternValue === 'X' || patternValue === 0) {
                        fingering.push({ string: i, fret: patternValue });
                    } else {
                        // Fretted strings (absolute fret number 1-4)
                        fingering.push({ 
                            string: i, 
                            fret: patternValue,
                            isRoot: (i === openChordData.rootString) 
                        });
                    }
                }
                
                return { 
                    name: `${NOTE_INFO[rootIndex].name} ${CHORD_DEFINITIONS[typeKey].name} (Open Position)`,
                    fingering: fingering,
                    barreFret: null, 
                    displayStartFret: 1, // Always starts at Fret 1 (the nut)
                    stringsToBarre: []
                };
            }
            
            // --- 2. Handle Transposable Barre Shapes (E-Shape / A-Shape) ---
            
            const shapeData = SHAPES[shapeKey];
            const fretPattern = shapeData.voicings[typeKey];
            const rootStringIndex = shapeData.rootStringIndex;
            
            // Get the open string's note index (e.g., E = 4, A = 9)
            const stringRootNote = STRING_TUNING[rootStringIndex];
            
            // Calculate the absolute fret the barre must start on based on selected root
            let fretDiff = (rootIndex - stringRootNote + 12) % 12;
            
            // Barre fret is the fret number (1-12). 0 difference means the octave (Fret 12).
            const barreFret = fretDiff === 0 ? 12 : fretDiff; 

            const fingering = [];
            let stringsToBarre = []; // Tracks strings fretted at the *barre fret* (relative fret 1)
            let highestFrettedNote = 0;

            for (let stringIndex = 0; stringIndex < SVG_CONFIG.TOTAL_STRINGS; stringIndex++) {
                const patternValue = fretPattern[stringIndex];

                if (patternValue === 'X') {
                    fingering.push({ string: stringIndex, fret: 'X' });
                } else if (patternValue === 0) {
                    fingering.push({ string: stringIndex, fret: 0 }); 
                } else {
                    // finalFret = BarreFret + (RelativeFret - 1)
                    const finalFret = barreFret + (patternValue - 1);
                    
                    // Track the highest absolute fret used
                    if (finalFret > highestFrettedNote) {
                        highestFrettedNote = finalFret;
                    }

                    fingering.push({ 
                        string: stringIndex, 
                        fret: finalFret, 
                        isRoot: (stringIndex === rootStringIndex && patternValue === 1) 
                    });

                    // Check if this string is fretted by the index finger (relative fret 1)
                    if (patternValue === 1) {
                         stringsToBarre.push(stringIndex);
                    }
                }
            }
            
            // --- Determine Barre Visibility (The Fix) ---
            let showBarre = false;
            
            if (shapeKey === 'e_shape' || shapeKey === 'a_shape') {
                // For E and A shapes, the index finger creates the barre. 
                // We show the barre if at least two strings are pressed at the barre fret.
                // E-shape typically has 3 strings at Fret 1. A-shape typically has 2 (5th and 1st string).
                if (stringsToBarre.length >= 2) { 
                    showBarre = true;
                }
            } else {
                // Default: require at least 3 strings to draw a barre line
                showBarre = (stringsToBarre.length >= 3); 
            }
            
            // --- Dynamic Display Start Fret for Barre Chords ---
            let finalDisplayStartFret = 1;
            
            if (highestFrettedNote > SVG_CONFIG.TOTAL_FRETS) {
                // Ensure the highest note is visible within the 5-fret window.
                finalDisplayStartFret = Math.max(1, highestFrettedNote - SVG_CONFIG.TOTAL_FRETS + 1);
            } else {
                finalDisplayStartFret = 1;
            }

            return { 
                name: `${NOTE_INFO[rootIndex].name} ${CHORD_DEFINITIONS[typeKey].name} (${shapeData.name})`,
                fingering: fingering,
                barreFret: showBarre ? barreFret : null,
                displayStartFret: finalDisplayStartFret,
                stringsToBarre: showBarre ? stringsToBarre : []
            };
        }

        /**
         * Draws the vertical chord diagram using SVG.
         */
        function drawFretboard(chordData) {
            const svg = fretboardSvg;
            svg.innerHTML = '';
            
            const { fingering, barreFret, stringsToBarre, displayStartFret } = chordData;
            
            const FRET_H = SVG_CONFIG.FRET_HEIGHT;
            const STRING_W = SVG_CONFIG.STRING_SPACING * (SVG_CONFIG.TOTAL_STRINGS - 1);
            const START_X = SVG_CONFIG.CHART_START_X; 
            const START_Y = SVG_CONFIG.CHART_START_Y;
            const TOTAL_FRETS = SVG_CONFIG.TOTAL_FRETS;
            const TOTAL_STRINGS = SVG_CONFIG.TOTAL_STRINGS;
            const FINGER_R = SVG_CONFIG.FINGER_RADIUS;

            const showNut = (displayStartFret === 1);
            const isBarreStart = (barreFret !== null && barreFret === displayStartFret);
            
            // Calculate actual height needed for SVG
            const svgHeight = START_Y + TOTAL_FRETS * FRET_H + 50; 
            svg.setAttribute('height', svgHeight);
            
            // --- 1. Draw Fret Lines (Horizontal) ---

            if (showNut) {
                // Draw the thick Nut (Fret 0)
                svg.innerHTML += `<rect x="${START_X - 2}" y="${START_Y - SVG_CONFIG.NUT_THICKNESS / 2}" width="${STRING_W + 4}" height="${SVG_CONFIG.NUT_THICKNESS}" fill="#374151"/>`;
            } else {
                // Draw the start fret line
                svg.innerHTML += `<line x1="${START_X}" y1="${START_Y}" x2="${START_X + STRING_W}" y2="${START_Y}" stroke="#374151" stroke-width="${SVG_CONFIG.FRET_THICKNESS}" />`;
                
                // Only draw the standard fret label if it's NOT a barre starting on this fret
                if (!isBarreStart) {
                    // Standard fret label offset
                    svg.innerHTML += `<text x="${START_X - 20}" y="${START_Y + 7}" text-anchor="end" font-size="14" fill="#374151">${displayStartFret}fr</text>`;
                }
            }

            // Draw the remaining fret lines
            for (let i = 1; i <= TOTAL_FRETS; i++) {
                const y = START_Y + i * FRET_H;
                svg.innerHTML += `<line x1="${START_X}" y1="${y}" x2="${START_X + STRING_W}" y2="${y}" stroke="#374151" stroke-width="${SVG_CONFIG.FRET_THICKNESS}" />`;
            }

            // --- 2. Draw String Lines (Vertical) ---
            for (let i = 0; i < TOTAL_STRINGS; i++) {
                const x = START_X + i * SVG_CONFIG.STRING_SPACING;
                const y2 = START_Y + TOTAL_FRETS * FRET_H;
                svg.innerHTML += `<line x1="${x}" y1="${START_Y}" x2="${x}" y2="${y2}" stroke="#374151" stroke-width="${SVG_CONFIG.STRING_THICKNESS}" />`;
            }

            // --- 3. Draw Barre Line (If applicable) ---
            if (barreFret !== null && stringsToBarre.length > 0) {
                const barreFretOffset = barreFret - displayStartFret;
                
                if (barreFretOffset >= 0 && barreFretOffset < TOTAL_FRETS) {
                    const barreY = START_Y + barreFretOffset * FRET_H + FRET_H / 2;
                    
                    const firstBarreStringX = START_X + stringsToBarre[0] * SVG_CONFIG.STRING_SPACING;
                    const lastBarreStringX = START_X + stringsToBarre[stringsToBarre.length - 1] * SVG_CONFIG.STRING_SPACING;

                    // Draw the blue barre line
                    svg.innerHTML += `<line 
                        x1="${firstBarreStringX}" y1="${barreY}" 
                        x2="${lastBarreStringX}" y2="${barreY}" 
                        stroke="#3b82f6" stroke-width="12" stroke-linecap="round" opacity="0.6"/>`;
                        
                    // Draw Barre Fret Number Label next to the blue barre
                    svg.innerHTML += `<text 
                        x="${START_X - 25}" 
                        y="${barreY + 6}" 
                        text-anchor="end" 
                        font-size="18" 
                        font-weight="extrabold" 
                        fill="#3b82f6">
                        ${barreFret}fr
                    </text>`;
                }
            }


            // --- 4. Draw Finger Dots, Mutes, and Opens ---
            fingering.forEach(f => {
                const stringX = START_X + f.string * SVG_CONFIG.STRING_SPACING;
                
                if (f.fret === 'X') {
                    // Muted string (Above the nut line)
                    svg.innerHTML += `<text x="${stringX}" y="${START_Y - 10}" text-anchor="middle" font-size="20" font-weight="bold" fill="#ef4444">X</text>`;
                } else if (f.fret === 0) {
                    // Open string (Above the nut line)
                    svg.innerHTML += `<circle cx="${stringX}" cy="${START_Y - 10}" r="6" fill="transparent" stroke="#374151" stroke-width="2"/>`;
                } else {
                    const fretNumber = f.fret;
                    const fretOffset = fretNumber - displayStartFret;
                    
                    if (fretOffset >= 0 && fretOffset < TOTAL_FRETS) {
                        const fingerY = START_Y + fretOffset * FRET_H + FRET_H / 2;
                        
                        let isCoveredByBarre = (barreFret === fretNumber && stringsToBarre.includes(f.string));

                        if (!isCoveredByBarre) {
                            const fill = f.isRoot ? '#ef4444' : '#3b82f6';
                            const text = f.isRoot ? 'R' : '';
                            
                            // Draw the finger dot
                            svg.innerHTML += `<circle cx="${stringX}" cy="${fingerY}" r="${FINGER_R}" fill="${fill}" class="key-shadow"/>`;
                            
                            // Draw the root note indicator
                            svg.innerHTML += `<text x="${stringX}" y="${fingerY + 5}" text-anchor="middle" font-weight="bold" font-size="12" fill="white">${text}</text>`;
                        }
                    }
                }
            });

            // --- 5. Draw Fret Markers (Dots for 3, 5, etc.) ---
            const dotFrets = [3, 5, 7, 9, 12]; // Standard fret markers on the neck
            const dotX = START_X + STRING_W / 2;
            const dotR = 5;

            dotFrets.forEach(absoluteFret => {
                const fretOffset = absoluteFret - displayStartFret;
                
                if (fretOffset >= 0 && fretOffset < TOTAL_FRETS) {
                    const markerY = START_Y + fretOffset * FRET_H + FRET_H; 
                    
                    if (absoluteFret > 0) {
                         if (absoluteFret % 12 === 0) { 
                            // Double dots for 12
                            svg.innerHTML += `<circle cx="${dotX - 15}" cy="${markerY}" r="${dotR}" fill="#cccccc"/>`;
                            svg.innerHTML += `<circle cx="${dotX + 15}" cy="${markerY}" r="${dotR}" fill="#cccccc"/>`;
                        } else if ([3, 5, 7, 9].includes(absoluteFret)) { 
                            // Single dots for 3, 5, 7, 9 
                            svg.innerHTML += `<circle cx="${dotX}" cy="${markerY}" r="${dotR}" fill="#cccccc"/>`;
                        }
                    }
                }
            });
        }

        /**
         * Main function to update the visualization based on user selection.
         */
        function updateVisualization() {
            const rootIndex = parseInt(rootNoteSelect.value);
            const typeKey = chordTypeSelect.value;
            const shapeKey = positionShapeSelect.value;
            
            // Clear message area
            messageAreaP.textContent = '';

            const chordData = calculateChordFingering(rootIndex, typeKey, shapeKey);

            if (chordData && chordData.error) {
                // Handle combinations that don't exist as standard open chords
                resultNameH2.textContent = `${NOTE_INFO[rootIndex].name} ${CHORD_DEFINITIONS[typeKey].name}`;
                fretboardSvg.innerHTML = ''; // Clear fretboard
                messageAreaP.textContent = chordData.error;
                return;
            }

            if (chordData) {
                resultNameH2.textContent = chordData.name;
                drawFretboard(chordData);
            }
        }
        
        // --- Event Listeners ---
        rootNoteSelect.addEventListener('change', updateVisualization);
        chordTypeSelect.addEventListener('change', updateVisualization);
        positionShapeSelect.addEventListener('change', updateVisualization); 

        // --- Initial Load ---
        populateSelectors();
    </script>
</body>
</html>